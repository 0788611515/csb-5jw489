{"version":3,"sources":["components/ToggleColumns.js","components/ProductList.js","components/FilterForm.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["ToggleColumns","props","className","Object","keys","columns","map","column","index","htmlFor","id","name","type","ProductList","FilterForm","placeholder","Search","useState","priceFrom","priceTo","department","price","currency","onPriceInputChange","onCheckboxClick","products","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ikGAEaA,EAAgB,SAACC,GAM5B,OACE,qBAAKC,UAAU,iBAAf,SAEIC,OAAOC,KAAKH,EAAMI,SAASC,KAAI,SAACC,EAAQC,GACtC,OACA,gCACE,uBAAOC,QAASF,EAAhB,SACGA,IAEH,uBACEG,GAAIH,EACJI,KAAMJ,EACNK,KAAK,eAPCJ,SCXPK,EAAc,SAACZ,GAI1B,OACE,sBAAKS,GAAG,eAAR,UACE,iCACE,8DAEF,kCACE,gCACE,+BACE,oCACA,sCACA,4CACA,4CAGJ,iCClBKI,EAAa,SAACb,GAOzB,OACE,gCACE,uBAAOQ,QAAQ,YAAf,yBACA,uBACEG,KAAK,SACLF,GAAG,YACHC,KAAK,YACLI,YAAY,kBACd,uBAAON,QAAQ,UAAf,uBACA,uBACEG,KAAK,SACLF,GAAG,UACHC,KAAK,UACLI,YAAY,oBCfPC,EAAS,SAACf,GACrB,MAA0BgB,mBAAS,CAAEC,UAAW,GAAIC,QAAS,KAA7D,mBAEA,GAFA,UAE8BF,mBAAS,CACrCP,IAAI,EACJC,MAAM,EACNS,YAAY,EACZC,OAAO,EACPC,UAAU,KALZ,6BAqBA,OACE,sBAAKpB,UAAU,WAAf,UACE,cAAC,EAAD,CACEgB,UAAW,GACXC,QAAS,GACTI,mBAAoB,KAEtB,cAAC,EAAD,CACEC,gBAAiB,GACjBnB,QAAS,KAEX,cAAC,EAAD,CACEoB,SAbkB,GAclBpB,QAAS,S,OClCFqB,EALH,WACV,OAAO,cAAC,EAAD,CAAQD,SAAUA,KCMPE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2130b774.chunk.js","sourcesContent":["import React from 'react'\n\nexport const ToggleColumns = (props) => {\n  const onCheckboxClick = (e) => {\n    // TODO: implement checkbox click handler\n  }\n\n  // TODO: Bind handlers and props\n  return (\n    <div className=\"toggle-columns\">\n      { \n        Object.keys(props.columns).map((column, index) => {\n          return ( \n          <div key={index}>\n            <label htmlFor={column}>\n              {column}\n            </label>\n            <input\n              id={column}\n              name={column}\n              type=\"checkbox\" />\n          </div>)\n        })\n      }\n    </div>\n  );\n}\n","import React from 'react'\n\nexport const ProductList = (props) => {\n  // TODO: display appropriate header\n  // TODO: display only chosen columns\n  // TODO: display products as new table rows\n  return (\n    <div id=\"product-list\">\n      <header>\n        <strong>Product List (0 items)</strong>\n      </header>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Department</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const FilterForm = (props) => {\n\n  const onPriceInputChange = (e) => {\n    // TODO: implement handler\n  }\n\n  // TODO: bind handlers and props\n  return (\n    <div>\n      <label htmlFor=\"priceFrom\">Price From:</label>\n      <input\n        type=\"number\"\n        id=\"priceFrom\"\n        name=\"priceFrom\"\n        placeholder=\"Price from...\" />\n      <label htmlFor=\"priceTo\">Price To:</label>\n      <input\n        type=\"number\"\n        id=\"priceTo\"\n        name=\"priceTo\"\n        placeholder=\"Price to...\" />\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport '../styles/Search.css';\nimport { ToggleColumns } from './ToggleColumns';\nimport { ProductList } from './ProductList';\nimport { FilterForm } from './FilterForm';\n\nexport const Search = (props) => {\n  const [price, setPrice] = useState({ priceFrom: '', priceTo: '' });\n\n  const [columns, setColumns] = useState({\n    id: true,\n    name: true,\n    department: true,\n    price: true,\n    currency: true,\n  });\n\n  const onPriceInputChange = (name, value) => {\n    // TODO: implement price change handler\n  }\n\n  const onCheckboxClick = (name, checked) => {\n    // TODO: implement checkbox click handler\n  }\n\n  const filterProducts = () => {\n    // TODO: implement handler for filtering products by price range\n  }\n\n  let displayedProducts = [];\n  return (\n    <div className=\"Products\">\n      <FilterForm\n        priceFrom={''}\n        priceTo={''}\n        onPriceInputChange={''} />\n\n      <ToggleColumns\n        onCheckboxClick={''}\n        columns={''} />\n\n      <ProductList\n        products={displayedProducts}\n        columns={''} />\n    </div>\n  );\n}\n\nexport default Search;\n","import React from 'react'\n\nimport { Search } from './components/Search'\nimport products from './assets/products.json';\n\nconst App = () => {\n  return <Search products={products} />\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}